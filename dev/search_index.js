var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FerriteAssembly","category":"page"},{"location":"#FerriteAssembly","page":"Home","title":"FerriteAssembly","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of FerriteAssembly  is to provide a simple structure to perform assembly in  Ferrite.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sequential and threaded assembly of both the DofHandler and MixedDofHandler are supported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package work by exporting the doassemble! function, and requires the  user to define either element_routine! (calculate both Ke and re), or just element_residual! (calculate only re).  In the latter case, Ke is calculated by  ForwardDiff.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"An advanced option to scale the unknowns, residual, and jacobian exists  (currently undocumented)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Include the example here, but modify the Literate output to suit being embedded\nusing Literate, Markdown\nfilename = \"firstexample_literate\"\nLiterate.markdown(filename*\".jl\")\ncontents = read(filename*\".md\", String)\nLiterate.script(filename*\".jl\"; name=\"firstexample\")\nrm(filename*\".jl\")\nrm(filename*\".md\")\nheader_end = last(findnext(\"```\", contents, 4))+1\nMarkdown.parse(replace(contents[header_end:end], \n    \"*This page was generated using [Literate.jl]\"=>\"*The examples were generated using [Literate.jl]\")\n    )","category":"page"},{"location":"#Detailed-API-description","page":"Home","title":"Detailed API description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One of the element methods should be overloaded for a given combination of cellvalues and material.","category":"page"},{"location":"","page":"Home","title":"Home","text":"FerriteAssembly.element_routine!\nFerriteAssembly.element_residual!","category":"page"},{"location":"#FerriteAssembly.element_routine!","page":"Home","title":"FerriteAssembly.element_routine!","text":"element_routine!(\n    Ke::AbstractMatrix, re::AbstractVector, state,\n    ae::AbstractVector, material, cellvalues, \n    dh_fh::Union{DofHandler,FieldHandler}, Δt, buffer\n    )\n\nThe main function to be overloaded for the specific material and cellvalues. This function should modify the element stiffness matrix Ke and the residual re.\n\nstate should contain a state description for the element.  Typically, state will be a vector with a state variable for each  integration point, but it can also be any other type for each element.  On input, these are the old values and should be mutated to the updated  value for the current time step and guess for ae. \nThe user defined material variable usually contain the material parameters. \ncellvalues should contain the CellValues for the given element.  It can also be a tuple or named tuple of cellvalues. \nWhen the regular DofHandler is used, dh_fh::DofHandler is passed to the element  routine. However, if the MixedDofHandler is used, one of its fieldhandlers are passed  as dh_fh::FieldHandler. This gives the option to call dof_range(dh_fh, field::Symbol)  for multi-field problems. \nΔt is time increment given to doassemble\nbuffer is normally CellBuffer (if given to doassemble). Then, it can be used to get \nbuffer.ae_old: The old values of the displacements (if aold::Nothing is passed to  doassemble, buffer.ae_old will be NaNs)\nbuffer.cell_load: The cell_load passed to CellBuffer, typically used for  body loads or source terms. \nbuffer.cache: The cache passed to CellBuffer, typically used to gather all  preallocations if such are necessary\ngetcoordinates(buffer)::Vector{Vec}: The cell's coordinates\ncelldofs(buffer)::Vector{Int}: The cell's global degrees of freedom numbers\n\n\n\n\n\n","category":"function"},{"location":"#FerriteAssembly.element_residual!","page":"Home","title":"FerriteAssembly.element_residual!","text":"element_residual!(\n    re::AbstractVector, state, \n    ae::AbstractVector, material, cellvalues, \n    dh_fh::Union{DofHandler,FieldHandler}, Δt, buffer\n    )\n\nTo calculate the element tangent stiffness Ke automatically by using ForwardDiff, it is possible to overload element_residual! instead of element_routine!. See  element_routine! for a description of the input parameters. \n\nNote that in order for this function to work, care must be taken when mutating values to not change their types. When mutating the state, ensure to call ForwardDiff.value() on those values. Warning: Only do this at a point when the calculation of re is  unaffected by the values in state, otherwise Ke will be wrong. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Variables that are used and modified for each cell of a certain type,  but that don't belong to a specific cell, are collected in a CellBuffer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CellBuffer","category":"page"},{"location":"#FerriteAssembly.CellBuffer","page":"Home","title":"FerriteAssembly.CellBuffer","text":"CellBuffer(numdofs::Int, numnodes::Int, ::Val{dim}, cellvalues, material, cell_load=nothing, cache=nothing)\n\nCreate a cell cache for an element with numdofs degrees of freedom and numnodes nodes with dimension dim. Add the given cellvalues, material,  and cache to the CellBuffer as well. \n\nCellBuffer(dh::DofHandler, cellvalues, material, cell_load=nothing, cache=nothing)\n\nUse dh to get numdofs, numnodes, and dim, before calling the above method definition. \n\nCellBuffer(dh::MixedDofHandler, fh::FieldHandler, cellvalues, material, cell_load=nothing, cache=nothing)\n\nUse dh and fh to get numdofs, numnodes, and dim,  before calling the first CellBuffer method definition. \n\nCellBuffer(dh::MixedDofHandler, cellvalues, material, cell_load=nothing, cache=nothing)\n\nReturn a tuple of CellBuffers for each FieldHandler in dh.fieldhandlers. cellvalues[i] corresponds to dh.fieldhandlers[i], and so does  materials[i], cell_load[i] and caches[i]. If only one CellValues, material, cell_load, and/or cache is given (not as a ::Tuple), the same is used for all fieldhandlers.  If a tuple of cellvalues (or materials/cell_load/caches) should be used for each cell,  and the same tuple should be used for each fieldhandler,  then it must be given as a tuple of tuples. (Alternatively, it is possible to use a NamedTuple)\n\nThe Ferrite.jl functions getcoordinates(::CellBuffer) and celldofs(::CellBuffer) are defined and can  be used inside an element routine to get the current cell's coordinates and dof-numbers. \n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"For parallel assembly, we need a vector of CellBuffers:  One CellBuffer for each thread. For the MixedDofHandler, we first loop over the type of cells, so we need a tuple that contains a vector of CellBuffers.  Construction of this via deepcopy is implemented as ","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_threaded_CellBuffers","category":"page"},{"location":"#FerriteAssembly.create_threaded_CellBuffers","page":"Home","title":"FerriteAssembly.create_threaded_CellBuffers","text":"create_threaded_CellBuffers(c::CellBuffer; nthreads=Threads.nthreads())\ncreate_threaded_CellBuffers(cs::Tuple; nthreads=Threads.nthreads())\n\nConvenience function for creating cell buffers for each thread.  The standard workflow is to first call CellBuffer with the  dof handler. For DofHandler this will give a CellBuffer,  and for MixedDofHandler this gives a tuple of CellBuffers.  In both cases, the output can be given to create_threaded_CellBuffers to produce the appropriate result required by the threaded versions of doassemble!.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Similarily, we need a vector of assemblers that is convieniently  created by calling ","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_threaded_assemblers","category":"page"},{"location":"#FerriteAssembly.create_threaded_assemblers","page":"Home","title":"FerriteAssembly.create_threaded_assemblers","text":"create_threaded_assemblers(K, r; nthreads=Threads.nthreads())\n\nConvenience function for creating a nthreads long vector with the  output of start_assemble as elements\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"The initial state variables may vary depending on the position in the grid. Furthermore, the datastructure depends on the type of dof handler, so a convenience function exists that creates the correct variable","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_states","category":"page"},{"location":"#FerriteAssembly.create_states","page":"Home","title":"FerriteAssembly.create_states","text":"create_states(dh::DofHandler, statefun::Function=Returns(nothing), cellvalues::Union{CellValues,Nothing}=nothing)\n\nCreates a Vector of states for each cell in dh, where a state=statefun(x::Vec) and x is  the coordinate in the grid. If isnothing(cellvalues), then the statefun is called once for  the average nodal coordinate of each cell. Otherwise, it is called once per quadrature point in  cellvalues for that cell. \n\n\n\n\n\ncreate_states(dh::MixedDofHandler, \n    statefun::Union{Function,Tuple}=Returns(nothing), \n    cellvalues::Union{CellValues,Tuple,Nothing}=nothing\n    )\n\nCreates a Tuple of the output of the following function for each fieldhandler in dh. If statefuns and/or cellvalues are not tuples, the same value is used for each fieldhandler. \n\ncreate_states(dh::MixedDofHandler, fh::FieldHandler, statefun::Function, cellvalues::Union{Nothing,CellValues})\n\nReturns a Dict{Int} with states for each cell in fh's cellset and keys corresponding to the global cellid If isnothing(cellvalues), then the statefun(x::Vec) is called once for the average nodal coordinate x of each cell.  Otherwise, it is called once for each quadrature point location x given by cellvalues for that cell. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Once everything is set up, one can call the function which will actually  do the assembly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"doassemble!","category":"page"},{"location":"#FerriteAssembly.doassemble!","page":"Home","title":"FerriteAssembly.doassemble!","text":"doassemble!(\n    assembler::Ferrite.AbstractSparseAssembler, cellbuffer::CellBuffer, \n    s::AbstractVector, dh::DofHandler, \n    a=nothing, aold=nothing, Δt=nothing\n    )\n\nSequential assembly of cells with the dh::DofHandler.\n\nassembler is obtained from Ferrite.jl's start_assemble(K,r) function\ncellbuffer contains buffers for the specific cell.  See  CellBuffer for more info. \ns is a collection (vector, dict, etc.) of state variables, where indexing  by cellnr gives the state variables for that cell. \na and aold are the current and old unknowns (can be set to nothing if not used)\nΔt is the time increment passed into each element routine\n\n\n\n\n\ndoassemble!(\n    assemblers::Vector{<:Ferrite.AbstractSparseAssembler},\n    cellbuffers::Vector{<:CellBuffer}, states, \n    colored_sets::Vector{Vector{Int}}, dh::DofHandler, \n    a=nothing, aold=nothing, Δt=nothing\n    )\n\nThreaded assembly of cells with the dh::DofHandler.\n\nassemblers are assemblers for each thread, which can be obtained with the create_threaded_assemblers function. \ncellbuffers contains buffers for the specific cell, for each thread. This can be created by create_threaded_CellBuffers.  See also CellBuffer for more info.\nstates, a, aold, and Δt are the same as for the  sequential doassemble!\ncolored_sets are cellsets for each color\n\n\n\n\n\ndoassemble!(\n    assembler::Ferrite.AbstractSparseAssembler, \n    cellbuffers::Tuple, states::Tuple, \n    dh::MixedDofHandler, \n    a=nothing, aold=nothing, Δt=nothing\n    )\n\nSequential assembly of cells with the dh::MixedDofHandler.\n\ncellbuffers contains buffers for the specific cell in each FieldHandler in dh.fieldhandlers See  CellBuffer for more info. \nstates is a tuple which contains a collection of state variables,  one vector for each FieldHandler in dh.fieldhandlers.  Each element in the collection, i.e. states[cellnr], contains the  state variables for one Cell with global number cellnr.  Unless all cells have the same type of the state, it might make sense to use a  Dict{Int,State} where the key refers to the global number. \nassembler, a, aold, and Δt are the same as for the DofHandler case. \n\n\n\n\n\ndoassemble!(\n    assemblers::Vector{<:Ferrite.AbstractSparseAssembler},\n    cellbuffers::Tuple, \n    states::Tuple, \n    colored_sets::Vector{Vector{Int}}, dh::MixedDofHandler, \n    a::AbstractVector, aold::AbstractVector, Δt::Number\n    )\n\nThreaded assembly of cells with the dh::MixedDofHandler.\n\nassemblers and colored_sets are the same as for the threaded DofHandler case.\nstates are the same as for the sequential MixedDofHandler case.\ncellbuffers contains vectors Vector{CellBuffer} for the cell type in  each FieldHandler in dh.fieldhandlers. The vector element corresponds to each  thread. This can be created by create_threaded_CellBuffers.  See also CellBuffer for more info.\na, aold, and Δt are the same as for the DofHandler case.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Internal-API","page":"Internal API","title":"Internal API","text":"","category":"section"},{"location":"internals/","page":"Internal API","title":"Internal API","text":"Note that the internal API may change without being considered a breaking change!","category":"page"},{"location":"internals/","page":"Internal API","title":"Internal API","text":"FerriteAssembly.assemble_cell!\nFerriteAssembly.inner_doassemble!\nFerriteAssembly.assemble_cell_reinited!\nFerriteAssembly._copydofs!\nFerriteAssembly._maketuple\nFerriteAssembly.create_state\nFerriteAssembly.reinit!","category":"page"},{"location":"internals/#FerriteAssembly.assemble_cell!","page":"Internal API","title":"FerriteAssembly.assemble_cell!","text":"assemble_cell!(assembler, cellbuffer, dh::DofHandler, cellnr, a, aold, state, Δt)\nassemble_cell!(assembler, cellbuffer, dh::MixedDofHandler, fh::FieldHandler, cellnr, a, aold, state, Δt)\n\nInternal function to that reinitializes the cellbuffer and calls assemble_cell_reinited!.\n\n\n\n\n\n","category":"function"},{"location":"internals/#FerriteAssembly.inner_doassemble!","page":"Internal API","title":"FerriteAssembly.inner_doassemble!","text":"inner_doassemble!(\n    assembler, cellbuffer::CellBuffer, states, \n    dh::MixedDofHandler, fh::FieldHandler, a, aold, Δt\n    )\n\nSequential assembly of cells corresponding to the given fh  from dh.fieldhandlers.  Internal function that is called from the sequential version  of doassemble! for the MixedDofHandler\n\n\n\n\n\ninner_doassemble!(\n    assemblers::Vector{<:Ferrite.AbstractSparseAssembler},\n    cellbuffers::Vector{<:CellBuffer}, states, \n    colored_sets::Vector{Vector{Int}}, \n    dh::MixedDofHandler, fh::FieldHandler, a, aold, Δt)\n\nParallel assembly of cells corresponding to the given fh from  dh.fieldhandlers. Internal function that is called from the parallel version of  doassemble! for the MixedDofHandler\n\n\n\n\n\n","category":"function"},{"location":"internals/#FerriteAssembly.assemble_cell_reinited!","page":"Internal API","title":"FerriteAssembly.assemble_cell_reinited!","text":"assemble_cell_reinited!(assembler, cellbuffer, dh_fh::Union{DofHandler,FieldHandler}, state, Δt)\n\nInternal function that assembles the cell described by the reinitialized cellbuffer. This function is called  in all cases: Parallel or sequential and DofHandler or MixedDofHandler\n\n\n\n\n\n","category":"function"},{"location":"internals/#FerriteAssembly._copydofs!","page":"Internal API","title":"FerriteAssembly._copydofs!","text":"_copydofs!(edofs::Vector, gdofs::Vector, inds::Vector{Int})\n\nInternal function for faster copying of global values into the element values.  Equivalent to edofs .= gdofs[inds]     _copydofs!(edofs::Vector, gdofs::Nothing, inds::Vector{Int})\n\nFill edofs with NaN\n\n\n\n\n\n","category":"function"},{"location":"internals/#FerriteAssembly._maketuple","page":"Internal API","title":"FerriteAssembly._maketuple","text":"_maketuple(t, n)\n\nIf t is a tuple, check that length(t)=n and return t.  Otherwise, return a tuple of length n with t as every element\n\n\n\n\n\n","category":"function"},{"location":"internals/#FerriteAssembly.create_state","page":"Internal API","title":"FerriteAssembly.create_state","text":"create_state(statefun, cell, cv::Nothing)\ncreate_state(statefun, cell, cv::CellValues)\n\nInternal functions for calling statefun(x) for the cell center  if cv::Nothing or for each quadrature point if cv::CellValues.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Ferrite.reinit!","page":"Internal API","title":"Ferrite.reinit!","text":"Ferrite.reinit!(c::CellBuffer, dh::AbstractDofHandler, cellnum::Int, anew, aold)\n\nReinitialize the c::CellBuffer for cell number cellnum. The global degree of freedom vectors anew (current) and aold are used to update the cell degree of freedom vectors in c. If the global vectors are instead ::Nothing, the corresponding cell values are set to NaN The element stiffness, c.Ke, and residual, c.re, are also zeroed. \n\n\n\n\n\n","category":"function"}]
}
